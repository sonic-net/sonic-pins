/*
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef PINS_P4RT_APP_SONIC_APP_DB_MANAGER_H_
#define PINS_P4RT_APP_SONIC_APP_DB_MANAGER_H_

#include <string>
#include <utility>
#include <vector>

#include "absl/status/status.h"
#include "absl/status/statusor.h"
#include "p4/v1/p4runtime.pb.h"
#include "p4_pdpi/ir.pb.h"
#include "p4rt_app/sonic/redis_connections.h"
#include "p4rt_app/sonic/swss_utils.h"
#include "swss/json.h"
#include "swss/rediscommand.h"
#include "swss/table.h"
#include <nlohmann/json.hpp>

namespace p4rt_app {
namespace sonic {

// The P4RT App will usually target the AppDb P4RT table for which it is the
// only entry owner. However, in certain cases we can target other shared
// RedisDb tables.
enum class AppDbTableType {
  P4RT,
  VRF_TABLE,
};

// An update to send to AppDB. This update is already formatted for AppDB.
struct AppDbUpdate {
  AppDbTableType table;
  swss::KeyOpFieldsValuesTuple update;
  template <typename H> friend H AbslHashValue(H h, const AppDbUpdate &update) {
    return H::combine(std::move(h), update.table, kfvKey(update.update));
  }
};

// Creates an AppDB update for the provided entity.
absl::StatusOr<AppDbUpdate> CreateAppDbUpdate(p4::v1::Update::Type update_type,
                                              const pdpi::IrEntity &entity,
                                              const pdpi::IrP4Info &p4_info);

// Returns the AppDB table type of the entity.
AppDbTableType GetAppDbTableType(const pdpi::IrEntity &entity);

// Insert table definition
absl::Status AppendExtTableDefinition(nlohmann::json &tables,
                                      const pdpi::IrTableDefinition &ir_table);

// A definition set string in json format published to AppDb
absl::StatusOr<std::string>
PublishExtTablesDefinitionToAppDb(const nlohmann::json &tables_json,
                                  uint64_t cookie, P4rtTable &p4rt_table);

// Pushes a set of updates, generated by CreateAppDbUpdate(), to AppDB and
// records the results.
absl::Status PerformAppDbUpdates(
    P4rtTable &p4rt_table, VrfTable &vrf_table,
    const std::vector<std::pair<AppDbUpdate, pdpi::IrUpdateStatus *>>
        &updates_and_results);

// Returns all P4RT keys currently installed in the AppStateDb. This does not
// include any keys that are currently being handled by the lower layers (i.e.
// keys starting with _).
std::vector<std::string> GetAllP4TableEntryKeys(P4rtTable &p4rt_table);

// Returns the expected P4RT_TABLE key for a given IRTableEntry.
absl::StatusOr<std::string>
GetRedisP4rtTableKey(const pdpi::IrTableEntry &entry,
                     const pdpi::IrP4Info &p4_info);

// Reads a table entry from the P4RT_TABLE in the AppStateDb. Returns a failure
// if the entry does not exist, or cannot be translated into a pdpi::IrEntity.
// Note: this function will not be used to read packet replication entries from
// the P4RT_TABLE.
absl::StatusOr<pdpi::IrTableEntry>
ReadP4TableEntry(P4rtTable &p4rt_table, const pdpi::IrP4Info &p4info,
                 const std::string &key);

// Checks CounterDB for any counter data relating to the table entry and appends
// it to the ir_table_entry argument. The ir_table_entry is untouched if no
// counter data is found.
absl::Status AppendCounterDataForTableEntry(pdpi::IrTableEntry &ir_table_entry,
                                            P4rtTable &p4rt_table,
                                            const pdpi::IrP4Info &p4info);

// Returns the expected P4RT_TABLE key for a given IRTableEntry.
absl::StatusOr<std::string>
GetRedisP4rtTableKey(const pdpi::IrTableEntry &entry,
                     const pdpi::IrP4Info &p4_info);

} // namespace sonic
} // namespace p4rt_app

#endif // PINS_P4RT_APP_SONIC_APP_DB_MANAGER_H_
