
// P4 PD proto

// NOTE: This file is automatically created from the P4 program using the pdgen
//       library in p4_pdpi. DO NOT modify it manually.

syntax = "proto3";
package pdpi;

import "p4/v1/p4runtime.proto";
import "google/rpc/code.proto";
import "google/rpc/status.proto";

// PDPI uses the following formats for different kinds of values:
// - Format::IPV4 for IPv4 addresses (32 bits), e.g., "10.0.0.1".
// - Format::IPV6 for IPv6 addresses (128 bits) formatted according to RFC 5952.
//   E.g. "2001:db8::1".
// - Format::MAC for MAC addresses (48 bits), e.g., "01:02:03:04:aa".
// - Format::STRING for entities that the controller refers to by string, e.g.,
//   ports.
// - Format::HEX_STRING for anything else, i.e. bitstrings of arbitrary length.
//   E.g., "0x01ab".


// -- General definitions ------------------------------------------------------

// Ternary match. The value and mask are formatted according to the Format of the match field.
message Ternary {
  string value = 1;
  string mask = 2;
}

// LPM match. The value is formatted according to the Format of the match field.
message Lpm {
  string value = 1;
  int32 prefix_length = 2;
}

// Optional match. The value is formatted according to the Format of the match field.
message Optional {
  string value = 1;
}

// -- Tables -------------------------------------------------------------------

message IdTestTableEntry {
  message Match {
    string ipv6 = 1; // exact match / Format::IPV6 / 128 bits
    string ipv4 = 2; // exact match / Format::IPV4
  }
  Match match = 1;
  message Action {
  oneof action {
    DoThing1Action do_thing_1 = 2;
    DoThing2Action do_thing_2 = 1;
  }
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message ExactTableEntry {
  message Match {
    string normal = 1; // exact match / Format::HEX_STRING / 10 bits
    string ipv4 = 2; // exact match / Format::IPV4
    string ipv6 = 3; // exact match / Format::IPV6 / 128 bits
    string mac = 4; // exact match / Format::MAC
    string str = 5; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    NoAction NoAction = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message TernaryTableEntry {
  message Match {
    Ternary normal = 1; // ternary match / Format::HEX_STRING / 10 bits
    Ternary ipv4 = 2; // ternary match / Format::IPV4
    Ternary ipv6 = 3; // ternary match / Format::IPV6 / 128 bits
    Ternary mac = 4; // ternary match / Format::MAC
    // CAUTION: This match field is not (yet) supported.
    Ternary unsupported_field = 5; // ternary match / Format::HEX_STRING / 1 bits
    Ternary ipv6_upper_64_bits = 6; // ternary match / Format::IPV6 / upper 64 bits
    Ternary ipv6_upper_63_bits = 7; // ternary match / Format::IPV6 / upper 63 bits
  }
  Match match = 1;
  message Action {
  oneof action {
    DoThing3Action do_thing_3 = 1;
    // CAUTION: This action is not (yet) supported.
    UnsupportedAction unsupported_action = 2;
  }
  }
  Action action = 2;
  int32 priority = 3;
  bytes controller_metadata = 8;
}

message Lpm1TableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    NoAction NoAction = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message Lpm2TableEntry {
  message Match {
    Lpm ipv6 = 1; // lpm match / Format::IPV6 / 128 bits
  }
  Match match = 1;
  message Action {
    NoAction NoAction = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message WcmpTableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    DoThing1Action do_thing_1 = 2;
  }
  message WcmpAction {
    Action action = 1;
    int32 weight = 2;
    string watch_port = 3;  // Format::STRING
  }
  repeated WcmpAction wcmp_actions = 2;
  bytes controller_metadata = 8;
}

message CountAndMeterTableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    CountAndMeterAction count_and_meter = 1;
  }
  Action action = 2;
  BytesMeterConfig meter_config = 4;
  BytesAndPacketsCounterData counter_data = 6;
  MeterBytesAndPacketsCounterData meter_counter_data = 9;
  bytes controller_metadata = 8;
}

message Wcmp2TableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
  oneof action {
    DoThing1Action do_thing_1 = 2;
    DoThing2Action do_thing_2 = 3;
  }
  }
  message WcmpAction {
    Action action = 1;
    int32 weight = 2;
    string watch_port = 3;  // Format::STRING
  }
  repeated WcmpAction wcmp_actions = 2;
  bytes controller_metadata = 8;
}

message OptionalTableEntry {
  message Match {
    Optional ipv6 = 1; // optional match / Format::IPV6 / 128 bits
    Optional ipv4 = 2; // optional match / Format::IPV4
    Optional str = 3; // optional match / Format::STRING
  }
  Match match = 1;
  message Action {
    DoThing1Action do_thing_1 = 1;
  }
  Action action = 2;
  int32 priority = 3;
  bytes controller_metadata = 8;
}

message NoActionTableEntry {
  message Match {
    string ipv6 = 1; // exact match / Format::IPV6 / 128 bits
    string ipv4 = 2; // exact match / Format::IPV4
  }
  Match match = 1;
  message Action {
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

// CAUTION: This table is not (yet) supported.
message UnsupportedTableEntry {
  message Match {
    string ipv6 = 1; // exact match / Format::IPV6 / 128 bits
    string ipv4 = 2; // exact match / Format::IPV4
    // Refers to 'exact_table.mac'.
    string mac = 3; // exact match / Format::MAC
  }
  Match match = 1;
  message Action {
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message PacketCountAndMeterTableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    PacketCountAndMeterAction packet_count_and_meter = 1;
  }
  Action action = 2;
  BytesMeterConfig meter_config = 4;
  PacketsCounterData counter_data = 6;
  MeterPacketsCounterData meter_counter_data = 9;
  bytes controller_metadata = 8;
}

message ByteCountAndMeterTableEntry {
  message Match {
    Lpm ipv4 = 1; // lpm match / Format::IPV4
  }
  Match match = 1;
  message Action {
    ByteCountAndMeterAction byte_count_and_meter = 1;
  }
  Action action = 2;
  BytesMeterConfig meter_config = 4;
  BytesCounterData counter_data = 6;
  MeterBytesCounterData meter_counter_data = 9;
  bytes controller_metadata = 8;
}

message TwoMatchFieldsTableEntry {
  message Match {
    string id_1 = 1; // exact match / Format::STRING
    string id_2 = 2; // exact match / Format::HEX_STRING / 10 bits
  }
  Match match = 1;
  message Action {
  oneof action {
    DoThing1Action do_thing_1 = 2;
    DoThing4Action do_thing_4 = 1;
  }
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message GoldenTestFriendlyWcmpTableEntry {
  message Match {
    string key1 = 1; // exact match / Format::STRING
    string key2 = 2; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
  oneof action {
    OtherGoldenTestFriendlyAction other_golden_test_friendly_action = 2;
    GoldenTestFriendlyAction golden_test_friendly_action = 1;
  }
  }
  message WcmpAction {
    Action action = 1;
    int32 weight = 2;
    string watch_port = 3;  // Format::STRING
  }
  repeated WcmpAction wcmp_actions = 2;
  bytes controller_metadata = 8;
}

message ReferringToReferringByMatchFieldTableEntry {
  message Match {
    // Refers to 'referring_by_match_field_table.referring_id_1'.
    string referring_to_referring_id_1 = 1; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

// Table entry restrictions:
// ## Exact constraint with OR.
//   normal == 5 || normal == 6;
// ## LPM constraint.
//   ipv4::prefix_length != 0;
// ## Ternary constraint with exact set.
//   field10bit == 0xff;
// ## Large integer (most significant bit position > 64).
//   ipv6 == 0xffffffffffffffffffffffff;
// ## Ternary constraint with value.
//   mac::mask != 0 -> mac::value == 10;
// ## Implies constraint.
//   val == 1 -> mac::mask != 0;
// ## Metadata constraint.
//   ::priority > 500;
// ## P4runtime translated string constraint without reference.
// ## TODO: This constraint should read
// ## `nonreferring_str != ''`, but p4-constraints does not currently
// ## support strings.
//   nonreferring_str != 0;
// ## P4runtime translated string constraint with reference.
// ## TODO: This constraint should read
// ## `referring_str != 'some_str'` (or equals), but p4-constraints does not
// ## currently support strings. The current constraint is redundant.
//   referring_str::mask != 0 -> referring_str != 0;
message ConstrainedTableEntry {
  message Match {
    Optional val = 1; // optional match / Format::HEX_STRING / 1 bits
    string normal = 2; // exact match / Format::HEX_STRING / 10 bits
    Lpm ipv4 = 3; // lpm match / Format::IPV4
    Ternary ipv6 = 4; // ternary match / Format::IPV6 / 128 bits
    Ternary mac = 5; // ternary match / Format::MAC
    Optional referring_str = 6; // optional match / Format::STRING
    Optional nonreferring_str = 7; // optional match / Format::STRING
    Ternary field10bit = 8; // ternary match / Format::HEX_STRING / 10 bits
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  int32 priority = 3;
  bytes controller_metadata = 8;
}

message RefersToMulticastByMatchFieldTableEntry {
  message Match {
    string group_id = 1; // exact match / Format::HEX_STRING / 16 bits
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message RefersToMulticastByActionTableEntry {
  message Match {
    string val = 1; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    RefersToMulticastAction refers_to_multicast_action = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message ExactAndOptionalTableEntry {
  message Match {
    string ipv6 = 1; // exact match / Format::IPV6 / 128 bits
    string ipv4 = 2; // exact match / Format::IPV4
    Optional str = 3; // optional match / Format::STRING
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  int32 priority = 3;
  bytes controller_metadata = 8;
}

message OneMatchFieldTableEntry {
  message Match {
    string id = 1; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message ReferringByActionTableEntry {
  message Match {
    string val = 1; // exact match / Format::HEX_STRING / 10 bits
  }
  Match match = 1;
  message Action {
  oneof action {
    ReferringToTwoMatchFieldsAction referring_to_two_match_fields_action = 1;
    ReferringToOneMatchFieldAction referring_to_one_match_field_action = 2;
  }
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message ReferencedByMulticastReplicaTableEntry {
  message Match {
    string port = 1; // exact match / Format::STRING
    string instance = 2; // exact match / Format::HEX_STRING / 16 bits
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message ReferringByMatchFieldTableEntry {
  message Match {
    // Refers to 'two_match_fields_table.id_1'.
    string referring_id_1 = 1; // exact match / Format::STRING
    // Refers to 'two_match_fields_table.id_2'.
    string referring_id_2 = 2; // exact match / Format::HEX_STRING / 10 bits
  }
  Match match = 1;
  message Action {
    DoThing4Action do_thing_4 = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}

message GoldenTestFriendlyTableEntry {
  message Match {
    string key1 = 1; // exact match / Format::STRING
    string key2 = 2; // exact match / Format::STRING
  }
  Match match = 1;
  message Action {
    GoldenTestFriendlyAction golden_test_friendly_action = 1;
  }
  Action action = 2;
  bytes controller_metadata = 8;
}


// Corresponds to `MulticastGroupEntry` in p4runtime.proto. This table is part
// of the v1model architecture and is not explicitly present in the P4 program.
message MulticastGroupTableEntry {
  message Match {
    string multicast_group_id = 1;  // exact match / Format::HEX_STRING / 16 bits
  }
  message Action {
    ReplicateAction replicate = 1;
  }
  Match match = 1;
  Action action = 2;
  bytes metadata = 3;
}


// -- Actions ------------------------------------------------------------------

message DoThing1Action {
  string arg2 = 1; // Format::HEX_STRING / 32 bits
  string arg1 = 2; // Format::HEX_STRING / 32 bits
}

message DoThing2Action {
  string normal = 1; // Format::HEX_STRING / 10 bits
  string ipv4 = 2; // Format::IPV4
  string ipv6 = 3; // Format::IPV6 / 128 bits
  string mac = 4; // Format::MAC
  string str = 5; // Format::STRING
}

message DoThing3Action {
  string arg1 = 1; // Format::HEX_STRING / 32 bits
  string arg2 = 2; // Format::HEX_STRING / 32 bits
}

message CountAndMeterAction {
}

message DoThing4Action {
}

// CAUTION: This action is not (yet) supported.
message UnsupportedAction {
  // Refers to 'exact_table.normal'.
  string normal = 1; // Format::HEX_STRING / 10 bits
}

message PacketCountAndMeterAction {
}

message ByteCountAndMeterAction {
}

message RefersToMulticastAction {
  string multicast_group_id = 1; // Format::HEX_STRING / 16 bits
}

message NoAction {
}

message ReferringToTwoMatchFieldsAction {
  // Refers to 'two_match_fields_table.id_1'.
  string referring_id_1 = 1; // Format::STRING
  // Refers to 'two_match_fields_table.id_2'.
  string referring_id_2 = 2; // Format::HEX_STRING / 10 bits
}

message OtherGoldenTestFriendlyAction {
  string arg1 = 1; // Format::STRING
  string arg2 = 2; // Format::STRING
}

message ReferringToOneMatchFieldAction {
  // Refers to 'one_match_field_table.id'.
  string referring_id_1 = 1; // Format::STRING
}

message GoldenTestFriendlyAction {
  string arg1 = 1; // Format::STRING
  string arg2 = 2; // Format::STRING
}


// This action is unique to `MulticastGroupTableEntry` and is not explicitly
// present in the P4 program.
message ReplicateAction {
  // Corresponds to `Replica` in p4runtime.proto.
  message Replica {
    string port = 1;  // Format::STRING
    string instance = 2;  // Format::HEX_STRING / 16 bits
  }
  // Each `Replica` must have a unique (port, instance)-pair within the scope of
  // the `ReplicateAction` that contains it.
  repeated Replica replicas = 1;
}


// -- All tables ---------------------------------------------------------------

message TableEntry {
  oneof entry {
    IdTestTableEntry id_test_table_entry = 1;
    ExactTableEntry exact_table_entry = 2;
    TernaryTableEntry ternary_table_entry = 3;
    Lpm1TableEntry lpm1_table_entry = 4;
    Lpm2TableEntry lpm2_table_entry = 5;
    WcmpTableEntry wcmp_table_entry = 6;
    CountAndMeterTableEntry count_and_meter_table_entry = 7;
    Wcmp2TableEntry wcmp2_table_entry = 8;
    OptionalTableEntry optional_table_entry = 9;
    NoActionTableEntry no_action_table_entry = 13;
    // CAUTION: This table is not (yet) supported.
    UnsupportedTableEntry unsupported_table_entry = 15;
    PacketCountAndMeterTableEntry packet_count_and_meter_table_entry = 19;
    ByteCountAndMeterTableEntry byte_count_and_meter_table_entry = 23;
    TwoMatchFieldsTableEntry two_match_fields_table_entry = 1250980;
    GoldenTestFriendlyWcmpTableEntry golden_test_friendly_wcmp_table_entry = 4050172;
    ReferringToReferringByMatchFieldTableEntry referring_to_referring_by_match_field_table_entry = 7567824;
    ConstrainedTableEntry constrained_table_entry = 8408021;
    RefersToMulticastByMatchFieldTableEntry refers_to_multicast_by_match_field_table_entry = 8935806;
    RefersToMulticastByActionTableEntry refers_to_multicast_by_action_table_entry = 11813012;
    ExactAndOptionalTableEntry exact_and_optional_table_entry = 12300347;
    OneMatchFieldTableEntry one_match_field_table_entry = 12699062;
    ReferringByActionTableEntry referring_by_action_table_entry = 14558547;
    ReferencedByMulticastReplicaTableEntry referenced_by_multicast_replica_table_entry = 15642665;
    ReferringByMatchFieldTableEntry referring_by_match_field_table_entry = 16037969;
    GoldenTestFriendlyTableEntry golden_test_friendly_table_entry = 16597171;
    MulticastGroupTableEntry multicast_group_table_entry = 2047;
  }
}

message TableEntries {
  repeated TableEntry entries = 1;
}


// -- Packet-IO ----------------------------------------------------------------

message PacketIn {
  bytes payload = 1;

  message Metadata {
    string ingress_port = 1; // Format::HEX_STRING / 10 bits
    string target_egress_port = 2; // Format::STRING
  }
  Metadata metadata = 2;
}
message PacketOut {
  bytes payload = 1;

  message Metadata {
    string egress_port = 1; // Format::STRING
    string submit_to_ingress = 2; // Format::HEX_STRING / 1 bits
  }
  Metadata metadata = 2;
}


// -- Meter configs ------------------------------------------------------------

message BytesMeterConfig {
  // Committed/peak information rate (bytes per sec).
  int64 bytes_per_second = 1;
  // Committed/peak burst size.
  int64 burst_bytes = 2;
}

message PacketsMeterConfig {
  // Committed/peak information rate (packets per sec).
  int64 packets_per_second = 1;
  // Committed/peak burst size.
  int64 burst_packets = 2;
}

// -- Counter data -------------------------------------------------------------

message BytesCounterData {
  // Number of bytes.
  int64 byte_count = 1;
}

message PacketsCounterData {
  // Number of packets.
  int64 packet_count = 1;
}

message BytesAndPacketsCounterData {
  // Number of bytes.
  int64 byte_count = 1;
  // Number of packets.
  int64 packet_count = 2;
}

// -- Meter counter data -------------------------------------------------------

message MeterBytesCounterData {
  // Number of bytes per color.
  BytesCounterData green = 1;
  BytesCounterData yellow = 2;
  BytesCounterData red = 3;
}

message MeterPacketsCounterData {
  // Number of packets per color.
  PacketsCounterData green = 1;
  PacketsCounterData yellow = 2;
  PacketsCounterData red = 3;
}

message MeterBytesAndPacketsCounterData {
  // Number of bytes and packets per color.
  BytesAndPacketsCounterData green = 1;
  BytesAndPacketsCounterData yellow = 2;
  BytesAndPacketsCounterData red = 3;
}

// -- RPC messages -------------------------------------------------------------

// Describes an update in a Write RPC request.
message Update {
  // Required.
  p4.v1.Update.Type type = 1;
  // Required.
  TableEntry table_entry = 2;
}

// Describes a Write RPC request.
message WriteRequest {
  // Required.
  uint64 device_id = 1;
  // Required.
  p4.v1.Uint128 election_id = 2;
  // Required.
  repeated Update updates = 3;
}

// Describes the status of a single update in a Write RPC.
message UpdateStatus {
  // Required.
  google.rpc.Code code = 1;
  // Required for non-OK status.
  string message = 2;
}

// Describes the result of a Write RPC.
message WriteRpcStatus {
  oneof status {
    google.rpc.Status rpc_wide_error = 1;
    WriteResponse rpc_response = 2;
  }
}

// Describes a Write RPC response.
message WriteResponse {
  // Same order as `updates` in `WriteRequest`.
  repeated UpdateStatus statuses = 1;
}

// Read requests.
message ReadRequest {
  // Required.
  uint64 device_id = 1;
  // Indicates if counter data should be read.
  bool read_counter_data = 2;
  // Indicates if meter configs should be read.
  bool read_meter_configs = 3;
}

// A read request response.
message ReadResponse {
  // The table entries read by the switch.
  repeated TableEntry table_entries = 1;
}

// A stream message request
message StreamMessageRequest {
  oneof update {
    p4.v1.MasterArbitrationUpdate arbitration = 1;
    PacketOut packet = 2;
  }
}

// A stream error message
message StreamError {
  google.rpc.Status status = 1;
  PacketOut packet_out = 2;
}

// A stream message response
message StreamMessageResponse {
  oneof update {
    p4.v1.MasterArbitrationUpdate arbitration = 1;
    PacketIn packet = 2;
    // Used by the server to asynchronously report errors which occur when
    // processing StreamMessageRequest messages.
    StreamError error = 3;
  }
}

