=========================================================================
ReadRequest test: empty
=========================================================================

--- PI (Input):

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Device ID missing.

=========================================================================
ReadRequest test: no entities
=========================================================================

--- PI (Input):
device_id: 10

--- PI is invalid/unsupported:
UNIMPLEMENTED: Only wildcard reads of all table entries are supported. Only 1 entity is supported. Found 0 entities in read request.

=========================================================================
ReadRequest test: wrong entities
=========================================================================

--- PI (Input):
device_id: 10
entities {
  action_profile_member {
  }
}

--- PI is invalid/unsupported:
UNIMPLEMENTED: Read request is invalid: Only wildcard reads of all table entries are supported. Found an entity that is not a table entry.

=========================================================================
ReadRequest test: multiple table entries
=========================================================================

--- PI (Input):
device_id: 10
entities {
  table_entry {
  }
}
entities {
  table_entry {
  }
}

--- PI is invalid/unsupported:
UNIMPLEMENTED: Only wildcard reads of all table entries are supported. Only 1 entity is supported. Found 2 entities in read request.

=========================================================================
ReadRequest test: no meter, no counter
=========================================================================

--- PD (Input):
device_id: 10

--- IR:
device_id: 10

--- PI:
device_id: 10
entities {
  table_entry {
  }
}


=========================================================================
ReadRequest test: meter, no counter
=========================================================================

--- PD (Input):
device_id: 10
read_meter_configs: true

--- IR:
device_id: 10
read_meter_configs: true

--- PI:
device_id: 10
entities {
  table_entry {
    meter_config {
    }
  }
}


=========================================================================
ReadRequest test: no meter, counter
=========================================================================

--- PD (Input):
device_id: 10
read_counter_data: true

--- IR:
device_id: 10
read_counter_data: true

--- PI:
device_id: 10
entities {
  table_entry {
    counter_data {
    }
  }
}


=========================================================================
ReadRequest test: meter, counter
=========================================================================

--- PD (Input):
device_id: 10
read_counter_data: true
read_meter_configs: true

--- IR:
device_id: 10
read_counter_data: true
read_meter_configs: true

--- PI:
device_id: 10
entities {
  table_entry {
    meter_config {
    }
    counter_data {
    }
  }
}


=========================================================================
ReadResponse test: wrong entity
=========================================================================

--- PI (Input):
entities {
  action_profile_member {
  }
}

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Read response is invalid for the following reasons:
  UNIMPLEMENTED: Entity is invalid: Entity 'action_profile_member' is not supported.
  

=========================================================================
ReadResponse test: valid ternary table
=========================================================================

--- PD (Input):
table_entries {
  ternary_table_entry {
    match {
      normal {
        value: "0x052"
        mask: "0x273"
      }
    }
    action {
      do_thing_3 {
        arg1: "0x01234567"
        arg2: "0x01234568"
      }
    }
    priority: 32
  }
}

--- IR:
entities {
  table_entry {
    table_name: "ternary_table"
    matches {
      name: "normal"
      ternary {
        value {
          hex_str: "0x052"
        }
        mask {
          hex_str: "0x273"
        }
      }
    }
    priority: 32
    action {
      name: "do_thing_3"
      params {
        name: "arg1"
        value {
          hex_str: "0x01234567"
        }
      }
      params {
        name: "arg2"
        value {
          hex_str: "0x01234568"
        }
      }
    }
  }
}

--- PI:
entities {
  table_entry {
    table_id: 33554435
    match {
      field_id: 1
      ternary {
        value: "R"
        mask: "\002s"
      }
    }
    action {
      action {
        action_id: 16777219
        params {
          param_id: 1
          value: "\001#Eg"
        }
        params {
          param_id: 2
          value: "\001#Eh"
        }
      }
    }
    priority: 32
  }
}


=========================================================================
ReadResponse test: valid multicast group table
=========================================================================

--- PD (Input):
table_entries {
  multicast_group_table_entry {
    match {
      multicast_group_id: "0x0001"
    }
    action {
      replicate {
        replicas {
          port: "1"
          instance: "0x0001"
        }
      }
    }
  }
}

--- IR:
entities {
  packet_replication_engine_entry {
    multicast_group_entry {
      multicast_group_id: 1
      replicas {
        port: "1"
        instance: 1
      }
    }
  }
}

--- PI:
entities {
  packet_replication_engine_entry {
    multicast_group_entry {
      multicast_group_id: 1
      replicas {
        instance: 1
        port: "1"
      }
    }
  }
}


=========================================================================
ReadResponse test: multiple tables
=========================================================================

--- PD (Input):
table_entries {
  ternary_table_entry {
    match {
      normal {
        value: "0x052"
        mask: "0x273"
      }
    }
    action {
      do_thing_3 {
        arg1: "0x01234567"
        arg2: "0x01234568"
      }
    }
    priority: 32
  }
}
table_entries {
  ternary_table_entry {
    match {
      normal {
        value: "0x052"
        mask: "0x273"
      }
    }
    action {
      do_thing_3 {
        arg1: "0x01234567"
        arg2: "0x01234568"
      }
    }
    priority: 32
  }
}

--- IR:
entities {
  table_entry {
    table_name: "ternary_table"
    matches {
      name: "normal"
      ternary {
        value {
          hex_str: "0x052"
        }
        mask {
          hex_str: "0x273"
        }
      }
    }
    priority: 32
    action {
      name: "do_thing_3"
      params {
        name: "arg1"
        value {
          hex_str: "0x01234567"
        }
      }
      params {
        name: "arg2"
        value {
          hex_str: "0x01234568"
        }
      }
    }
  }
}
entities {
  table_entry {
    table_name: "ternary_table"
    matches {
      name: "normal"
      ternary {
        value {
          hex_str: "0x052"
        }
        mask {
          hex_str: "0x273"
        }
      }
    }
    priority: 32
    action {
      name: "do_thing_3"
      params {
        name: "arg1"
        value {
          hex_str: "0x01234567"
        }
      }
      params {
        name: "arg2"
        value {
          hex_str: "0x01234568"
        }
      }
    }
  }
}

--- PI:
entities {
  table_entry {
    table_id: 33554435
    match {
      field_id: 1
      ternary {
        value: "R"
        mask: "\002s"
      }
    }
    action {
      action {
        action_id: 16777219
        params {
          param_id: 1
          value: "\001#Eg"
        }
        params {
          param_id: 2
          value: "\001#Eh"
        }
      }
    }
    priority: 32
  }
}
entities {
  table_entry {
    table_id: 33554435
    match {
      field_id: 1
      ternary {
        value: "R"
        mask: "\002s"
      }
    }
    action {
      action {
        action_id: 16777219
        params {
          param_id: 1
          value: "\001#Eg"
        }
        params {
          param_id: 2
          value: "\001#Eh"
        }
      }
    }
    priority: 32
  }
}


=========================================================================
Update test: empty
=========================================================================

--- PI (Input):

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Update is invalid: Update type should be specified.

=========================================================================
Update test: missing type
=========================================================================

--- PI (Input):
entity {
  table_entry {
  }
}

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Update is invalid: Update type should be specified.

=========================================================================
Update test: wrong entity
=========================================================================

--- PI (Input):
type: INSERT
entity {
  action_profile_member {
  }
}

--- PI is invalid/unsupported:
UNIMPLEMENTED: Entity is invalid: Entity 'action_profile_member' is not supported.

=========================================================================
Update test: missing type
=========================================================================

--- PD (Input):
table_entry {
  ternary_table_entry {
    match {
      normal {
        value: "0x052"
        mask: "0x273"
      }
    }
    action {
      do_thing_3 {
        arg1: "0x01234567"
        arg2: "0x01234568"
      }
    }
    priority: 32
  }
}

--- PD is invalid/unsupported (detected when translating IR to PI):
Update is invalid: Update type should be specified.
=========================================================================
Update test: valid ternary table
=========================================================================

--- PD (Input):
type: MODIFY
table_entry {
  ternary_table_entry {
    match {
      normal {
        value: "0x052"
        mask: "0x273"
      }
    }
    action {
      do_thing_3 {
        arg1: "0x01234567"
        arg2: "0x01234568"
      }
    }
    priority: 32
  }
}

--- IR:
type: MODIFY
entity {
  table_entry {
    table_name: "ternary_table"
    matches {
      name: "normal"
      ternary {
        value {
          hex_str: "0x052"
        }
        mask {
          hex_str: "0x273"
        }
      }
    }
    priority: 32
    action {
      name: "do_thing_3"
      params {
        name: "arg1"
        value {
          hex_str: "0x01234567"
        }
      }
      params {
        name: "arg2"
        value {
          hex_str: "0x01234568"
        }
      }
    }
  }
}

--- PI:
type: MODIFY
entity {
  table_entry {
    table_id: 33554435
    match {
      field_id: 1
      ternary {
        value: "R"
        mask: "\002s"
      }
    }
    action {
      action {
        action_id: 16777219
        params {
          param_id: 1
          value: "\001#Eg"
        }
        params {
          param_id: 2
          value: "\001#Eh"
        }
      }
    }
    priority: 32
  }
}


=========================================================================
Update test: valid mulitcast group table
=========================================================================

--- PD (Input):
type: INSERT
table_entry {
  multicast_group_table_entry {
    match {
      multicast_group_id: "0x0001"
    }
    action {
      replicate {
        replicas {
          port: "1"
          instance: "0x0001"
        }
      }
    }
  }
}

--- IR:
type: INSERT
entity {
  packet_replication_engine_entry {
    multicast_group_entry {
      multicast_group_id: 1
      replicas {
        port: "1"
        instance: 1
      }
    }
  }
}

--- PI:
type: INSERT
entity {
  packet_replication_engine_entry {
    multicast_group_entry {
      multicast_group_id: 1
      replicas {
        instance: 1
        port: "1"
      }
    }
  }
}


=========================================================================
WriteRequest test: invalid role_id
=========================================================================

--- PI (Input):
role_id: 1

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Write request is invalid: Only the default role is supported, but got role ID 1 instead.

=========================================================================
WriteRequest test: invalid atomicity
=========================================================================

--- PI (Input):
atomicity: ROLLBACK_ON_ERROR

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Write request is invalid: Only CONTINUE_ON_ERROR is supported for atomicity.

=========================================================================
WriteRequest test: empty
=========================================================================

--- PD (Input):

--- IR:

--- PI:


=========================================================================
WriteRequest test: missing updates
=========================================================================

--- PD (Input):
device_id: 134
election_id {
  high: 23413
  low: 2312
}

--- IR:
device_id: 134
election_id {
  high: 23413
  low: 2312
}

--- PI:
device_id: 134
election_id {
  high: 23413
  low: 2312
}


=========================================================================
WriteRequest test: valid ternary table update
=========================================================================

--- PD (Input):
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  table_entry {
    ternary_table_entry {
      match {
        normal {
          value: "0x052"
          mask: "0x273"
        }
      }
      action {
        do_thing_3 {
          arg1: "0x01234567"
          arg2: "0x01234568"
        }
      }
      priority: 32
    }
  }
}

--- IR:
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  entity {
    table_entry {
      table_name: "ternary_table"
      matches {
        name: "normal"
        ternary {
          value {
            hex_str: "0x052"
          }
          mask {
            hex_str: "0x273"
          }
        }
      }
      priority: 32
      action {
        name: "do_thing_3"
        params {
          name: "arg1"
          value {
            hex_str: "0x01234567"
          }
        }
        params {
          name: "arg2"
          value {
            hex_str: "0x01234568"
          }
        }
      }
    }
  }
}

--- PI:
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  entity {
    table_entry {
      table_id: 33554435
      match {
        field_id: 1
        ternary {
          value: "R"
          mask: "\002s"
        }
      }
      action {
        action {
          action_id: 16777219
          params {
            param_id: 1
            value: "\001#Eg"
          }
          params {
            param_id: 2
            value: "\001#Eh"
          }
        }
      }
      priority: 32
    }
  }
}


=========================================================================
WriteRequest test: valid multicast group table update
=========================================================================

--- PD (Input):
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: INSERT
  table_entry {
    multicast_group_table_entry {
      match {
        multicast_group_id: "0x0001"
      }
      action {
        replicate {
          replicas {
            port: "1"
            instance: "0x0001"
          }
        }
      }
    }
  }
}

--- IR:
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: INSERT
  entity {
    packet_replication_engine_entry {
      multicast_group_entry {
        multicast_group_id: 1
        replicas {
          port: "1"
          instance: 1
        }
      }
    }
  }
}

--- PI:
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: INSERT
  entity {
    packet_replication_engine_entry {
      multicast_group_entry {
        multicast_group_id: 1
        replicas {
          instance: 1
          port: "1"
        }
      }
    }
  }
}


=========================================================================
WriteRequest test: multiple updates
=========================================================================

--- PD (Input):
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  table_entry {
    ternary_table_entry {
      match {
        normal {
          value: "0x052"
          mask: "0x273"
        }
      }
      action {
        do_thing_3 {
          arg1: "0x01234567"
          arg2: "0x01234568"
        }
      }
      priority: 32
    }
  }
}
updates {
  type: DELETE
  table_entry {
    ternary_table_entry {
      match {
        normal {
          value: "0x052"
          mask: "0x273"
        }
      }
      action {
        do_thing_3 {
          arg1: "0x01234567"
          arg2: "0x01234568"
        }
      }
      priority: 32
    }
  }
}

--- IR:
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  entity {
    table_entry {
      table_name: "ternary_table"
      matches {
        name: "normal"
        ternary {
          value {
            hex_str: "0x052"
          }
          mask {
            hex_str: "0x273"
          }
        }
      }
      priority: 32
      action {
        name: "do_thing_3"
        params {
          name: "arg1"
          value {
            hex_str: "0x01234567"
          }
        }
        params {
          name: "arg2"
          value {
            hex_str: "0x01234568"
          }
        }
      }
    }
  }
}
updates {
  type: DELETE
  entity {
    table_entry {
      table_name: "ternary_table"
      matches {
        name: "normal"
        ternary {
          value {
            hex_str: "0x052"
          }
          mask {
            hex_str: "0x273"
          }
        }
      }
      priority: 32
      action {
        name: "do_thing_3"
        params {
          name: "arg1"
          value {
            hex_str: "0x01234567"
          }
        }
        params {
          name: "arg2"
          value {
            hex_str: "0x01234568"
          }
        }
      }
    }
  }
}

--- PI:
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  entity {
    table_entry {
      table_id: 33554435
      match {
        field_id: 1
        ternary {
          value: "R"
          mask: "\002s"
        }
      }
      action {
        action {
          action_id: 16777219
          params {
            param_id: 1
            value: "\001#Eg"
          }
          params {
            param_id: 2
            value: "\001#Eh"
          }
        }
      }
      priority: 32
    }
  }
}
updates {
  type: DELETE
  entity {
    table_entry {
      table_id: 33554435
      match {
        field_id: 1
        ternary {
          value: "R"
          mask: "\002s"
        }
      }
      action {
        action {
          action_id: 16777219
          params {
            param_id: 1
            value: "\001#Eg"
          }
          params {
            param_id: 2
            value: "\001#Eh"
          }
        }
      }
      priority: 32
    }
  }
}


=========================================================================
WriteRequest test: multiple updates, some invalid
=========================================================================

--- PD (Input):
device_id: 113
election_id {
  high: 1231
  low: 77989
}
updates {
  type: MODIFY
  table_entry {
    ternary_table_entry {
      match {
        normal {
          value: "0x052"
          mask: "0x273"
        }
      }
      action {
        do_thing_3 {
          arg1: "0x01234567"
          arg2: "0x01234568"
        }
      }
      priority: 32
    }
  }
}
updates {
  type: DELETE
  table_entry {
    ternary_table_entry {
      match {
        normal {
          value: "0x052"
          mask: "0x273"
        }
      }
      action {
        do_thing_3 {
          arg2: "0x01234568"
        }
      }
      priority: 32
    }
  }
}

--- PD is invalid/unsupported (detected when translating IR to PI):
Write Request is invalid: updates[1] is invalid: Table entry for 'ternary_table' is invalid: Action 'do_thing_3' is invalid: Missing parameters: 'arg1'. Expected 2 parameters, but found 1 instead.
=========================================================================
Invalid gRPC WriteRpcStatus should fail test: Grpc status has ok status with non empty message
=========================================================================

--- gRPC (Input):
gRPC_error_code: 0
gRPC_error_message: "message_string"
gRPC_error_details: <empty>
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: gRPC status can not be ok and contain an error message or error details
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: gRPC status can not be ok and contain an error message or error details

=========================================================================
Invalid gRPC WriteRpcStatus should fail test: Invalid gRPC StatusCode
=========================================================================

--- gRPC (Input):
gRPC_error_code: 42
gRPC_error_message: "error_message"
gRPC_error_details: <empty>
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: Invalid status code: 42.
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: Invalid status code: 42.

=========================================================================
Invalid gRPC WriteRpcStatus should fail test: None of p4_error contained in google::rpc::status within grpc::Status is non-ok
=========================================================================

--- gRPC (Input):
gRPC_error_code: 2
gRPC_error_message: "batch update all successful"
details in google.rpc.Status:
inner_status.code:2
inner_status.message:"batch update all successful"
inner_status.details:
  error_status: OK error_message: ""
  error_status: OK error_message: ""
  error_status: OK error_message: ""
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: gRPC status should contain a mixure of successful and failed update status but all p4 errors are ok
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: gRPC status should contain a mixure of successful and failed update status but all p4 errors are ok

=========================================================================
Invalid gRPC WriteRpcStatus should fail test: Invalid p4 error has ok status but has non-empty message
=========================================================================

--- gRPC (Input):
gRPC_error_code: 2
gRPC_error_message: "mix of successful and failed batch update"
details in google.rpc.Status:
inner_status.code:2
inner_status.message:"mix of successful and failed batch update"
inner_status.details:
  error_status: OK error_message: ""
  error_status: RESOURCE_EXHAUSTED error_message: "table is full"
  error_status: OK error_message: "some message"
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: OK status should not contain error message.
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: OK status should not contain error message.

=========================================================================
Invalid gRPC WriteRpcStatus should fail test: gRPC status has code that is different from code contained in google::rpc::Status
=========================================================================

--- gRPC (Input):
gRPC_error_code: 2
gRPC_error_message: "some message"
details in google.rpc.Status:
inner_status.code:8
inner_status.message:"some message"
inner_status.details:
  error_status: RESOURCE_EXHAUSTED error_message: "table is full"
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: google::rpc::Status's status code does not match with status code in grpc_status
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: google::rpc::Status's status code does not match with status code in grpc_status

=========================================================================
Invalid gRPC WriteRpcStatus should fail test: gRPC status contains batch update information but does not have UNKNOWN status
=========================================================================

--- gRPC (Input):
gRPC_error_code: 8
gRPC_error_message: "some message"
details in google.rpc.Status:
inner_status.code:8
inner_status.message:"some message"
inner_status.details:
  error_status: RESOURCE_EXHAUSTED error_message: "table is full"
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: Only rpc-wide error and batch update status formats are supported for non-ok gRPC status
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: Only rpc-wide error and batch update status formats are supported for non-ok gRPC status

=========================================================================
Invalid gRPC WriteRpcStatus should fail test: gRPC status has batch update information but p4 error's canonical_code is not valid
=========================================================================

--- gRPC (Input):
gRPC_error_code: 2
gRPC_error_message: "some message"
details in google.rpc.Status:
inner_status.code:2
inner_status.message:"some message"
inner_status.details:
  error_status:  error_message: ""
--- absl::Status:
INVALID_ARGUMENT: Invalid gRPC status w.r.t. P4RT specification: Invalid status code: 42.
--- gRPC is invalid/unsupported:
INVALID_ARGUMENT: Invalid status code: 42.

=========================================================================
Invalid Ir WriteRpcStatus should fail test: IR rpc_response has ok code but non empty message
=========================================================================

--- IR (Input):
rpc_response {
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
    message: "error_message"
  }
  statuses {
    message: "error_message"
  }
}
--- IR is invalid/unsupported:
INVALID_ARGUMENT: OK status should not contain error message.

=========================================================================
Invalid Ir WriteRpcStatus should fail test: IR rpc_response has status with invalid code
=========================================================================

--- IR (Input):
rpc_response {
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
    code: 42
    message: "42 is invalid"
  }
}
--- IR is invalid/unsupported:
INVALID_ARGUMENT: Invalid status code: 42.

=========================================================================
Invalid Ir WriteRpcStatus should fail test: IR rpc_wide_error has invalid code
=========================================================================

--- IR (Input):
rpc_wide_error {
  code: 42
  message: "invalid_code"
}
--- IR is invalid/unsupported:
INVALID_ARGUMENT: Invalid status code: 42.

=========================================================================
Invalid Ir WriteRpcStatus should fail test: IR rpc_wide_error should not have ok status
=========================================================================

--- IR (Input):
rpc_wide_error {
  message: "ok_code"
}
--- IR is invalid/unsupported:
INVALID_ARGUMENT: IR rpc-wide error should not have ok status

=========================================================================
Pd WriteRpcStatus test (INPUT_IS_INVALID): PD rpc_wide error has invalid code
=========================================================================

--- PD(input):
rpc_wide_error {
  code: 42
  message: "bad_code"
}

---IR:
rpc_wide_error {
  code: 42
  message: "bad_code"
}

---PD is invalid/unsupported (detected when translating IR to gRPC.)
Invalid status code: 42.


=========================================================================
Pd WriteRpcStatus test (INPUT_IS_INVALID): non-ok status with empty message should fail
=========================================================================

--- PD(input):
rpc_response {
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
    message: "error_message"
  }
  statuses {
    message: "error_message"
  }
}

---IR:
rpc_response {
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
    message: "error_message"
  }
  statuses {
    message: "error_message"
  }
}

---PD is invalid/unsupported (detected when translating IR to gRPC.)
OK status should not contain error message.


=========================================================================
Pd WriteRpcStatus test (INPUT_IS_INVALID): invalid status in rpc response
=========================================================================

--- PD(input):
rpc_response {
  statuses {
    code: 42
  }
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
    code: UNKNOWN
  }
}

---PD is invalid/unsupported:
INVALID_ARGUMENT: Enum value within code is : 42


=========================================================================
Pd WriteRpcStatus test (INPUT_IS_VALID): all reads status ok
=========================================================================

--- PD(input):
rpc_response {
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
  }
}

---IR:
rpc_response {
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
  }
  statuses {
  }
}

---gRPC Status:
gRPC_error_code: 0
gRPC_error_message: ""
gRPC_error_details: <empty>

--- absl::Status:
OK

=========================================================================
Pd WriteRpcStatus test (INPUT_IS_INVALID): rpc-wide error with ok status code
=========================================================================

--- PD(input):
rpc_wide_error {
  message: "code is ok"
}

---IR:
rpc_wide_error {
  message: "code is ok"
}

---PD is invalid/unsupported (detected when translating IR to gRPC.)
IR rpc-wide error should not have ok status


=========================================================================
Pd WriteRpcStatus test (INPUT_IS_INVALID): rpc-wide error with invalid status code
=========================================================================

--- PD(input):
rpc_wide_error {
  code: 42
  message: "bad_code"
}

---IR:
rpc_wide_error {
  code: 42
  message: "bad_code"
}

---PD is invalid/unsupported (detected when translating IR to gRPC.)
Invalid status code: 42.


=========================================================================
Pd WriteRpcStatus test (INPUT_IS_VALID): rpc-wide error with ABORTED status
=========================================================================

--- PD(input):
rpc_wide_error {
  code: 10
  message: "int value of ABORTED is 10"
}

---IR:
rpc_wide_error {
  code: 10
  message: "int value of ABORTED is 10"
}

---gRPC Status:
gRPC_error_code: 10
gRPC_error_message: "int value of ABORTED is 10"
gRPC_error_details: <empty>

--- absl::Status:
ABORTED: int value of ABORTED is 10

=========================================================================
Pd WriteRpcStatus test (INPUT_IS_VALID): mix of successful and failed write update
=========================================================================

--- PD(input):
rpc_response {
  statuses {
    code: RESOURCE_EXHAUSTED
    message: "Table is full."
  }
  statuses {
  }
  statuses {
    code: ALREADY_EXISTS
    message: "Entity already exists."
  }
}

---IR:
rpc_response {
  statuses {
    code: RESOURCE_EXHAUSTED
    message: "Table is full."
  }
  statuses {
  }
  statuses {
    code: ALREADY_EXISTS
    message: "Entity already exists."
  }
}

---gRPC Status:
gRPC_error_code: 2
gRPC_error_message: "Batch failed, individual results:
#1: RESOURCE_EXHAUSTED: Table is full.
#2: OK
#3: ALREADY_EXISTS: Entity already exists.
"
details in google.rpc.Status:
inner_status.code:2
inner_status.message:""
inner_status.details:
  error_status: RESOURCE_EXHAUSTED error_message: "Table is full."
  error_status: OK error_message: ""
  error_status: ALREADY_EXISTS error_message: "Entity already exists."

--- absl::Status:
UNKNOWN: Batch failed, individual results:
#1: RESOURCE_EXHAUSTED: Table is full.
#2: OK
#3: ALREADY_EXISTS: Entity already exists.


=========================================================================
Pd WriteRpcStatus test (INPUT_IS_VALID): all write failed
=========================================================================

--- PD(input):
rpc_response {
  statuses {
    code: RESOURCE_EXHAUSTED
    message: "Table is full."
  }
  statuses {
    code: INVALID_ARGUMENT
    message: "can not parse write request."
  }
  statuses {
    code: ALREADY_EXISTS
    message: "entry already exists."
  }
}

---IR:
rpc_response {
  statuses {
    code: RESOURCE_EXHAUSTED
    message: "Table is full."
  }
  statuses {
    code: INVALID_ARGUMENT
    message: "can not parse write request."
  }
  statuses {
    code: ALREADY_EXISTS
    message: "entry already exists."
  }
}

---gRPC Status:
gRPC_error_code: 2
gRPC_error_message: "Batch failed, individual results:
#1: RESOURCE_EXHAUSTED: Table is full.
#2: INVALID_ARGUMENT: can not parse write request.
#3: ALREADY_EXISTS: entry already exists.
"
details in google.rpc.Status:
inner_status.code:2
inner_status.message:""
inner_status.details:
  error_status: RESOURCE_EXHAUSTED error_message: "Table is full."
  error_status: INVALID_ARGUMENT error_message: "can not parse write request."
  error_status: ALREADY_EXISTS error_message: "entry already exists."

--- absl::Status:
UNKNOWN: Batch failed, individual results:
#1: RESOURCE_EXHAUSTED: Table is full.
#2: INVALID_ARGUMENT: can not parse write request.
#3: ALREADY_EXISTS: entry already exists.


=========================================================================
StreamMessageRequest test: unsupported update
=========================================================================

--- PI (Input):
digest_ack {
  digest_id: 1
  list_id: 3
}

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Unsupported update: digest_ack.

=========================================================================
StreamMessageRequest test: empty
=========================================================================

--- PD (Input):

--- PD is invalid/unsupported:
NOT_FOUND: Oneof field "update" is not set
=========================================================================
StreamMessageRequest test: arbitration
=========================================================================

--- PD (Input):
arbitration {
  device_id: 5314
  election_id {
    low: 234123
  }
  status {
  }
}

--- IR:
arbitration {
  device_id: 5314
  election_id {
    low: 234123
  }
  status {
  }
}

--- PI:
arbitration {
  device_id: 5314
  election_id {
    low: 234123
  }
  status {
  }
}


=========================================================================
StreamMessageRequest test: packet
=========================================================================

--- PD (Input):
packet {
  payload: "1"
  metadata {
    egress_port: "eth-1/2/3"
    submit_to_ingress: "0x1"
  }
}

--- IR:
packet {
  payload: "1"
  metadata {
    name: "egress_port"
    value {
      str: "eth-1/2/3"
    }
  }
  metadata {
    name: "submit_to_ingress"
    value {
      hex_str: "0x1"
    }
  }
}

--- PI:
packet {
  payload: "1"
  metadata {
    metadata_id: 1
    value: "eth-1/2/3"
  }
  metadata {
    metadata_id: 2
    value: "\001"
  }
  metadata {
    metadata_id: 3
    value: "\000"
  }
}


=========================================================================
StreamMessageResponse test: unsupported update
=========================================================================

--- PI (Input):
digest {
  digest_id: 1
  list_id: 3
}

--- PI is invalid/unsupported:
INVALID_ARGUMENT: Unsupported update: digest.

=========================================================================
StreamMessageResponse test: empty
=========================================================================

--- PD (Input):

--- PD is invalid/unsupported:
NOT_FOUND: Oneof field "update" is not set
=========================================================================
StreamMessageResponse test: arbitration
=========================================================================

--- PD (Input):
arbitration {
  device_id: 5314
  election_id {
    low: 234123
  }
  status {
  }
}

--- IR:
arbitration {
  device_id: 5314
  election_id {
    low: 234123
  }
  status {
  }
}

--- PI:
arbitration {
  device_id: 5314
  election_id {
    low: 234123
  }
  status {
  }
}


=========================================================================
StreamMessageResponse test: packet
=========================================================================

--- PD (Input):
packet {
  payload: "1"
  metadata {
    ingress_port: "0x034"
    target_egress_port: "eth-1/2/3"
  }
}

--- IR:
packet {
  payload: "1"
  metadata {
    name: "ingress_port"
    value {
      hex_str: "0x034"
    }
  }
  metadata {
    name: "target_egress_port"
    value {
      str: "eth-1/2/3"
    }
  }
}

--- PI:
packet {
  payload: "1"
  metadata {
    metadata_id: 1
    value: "4"
  }
  metadata {
    metadata_id: 2
    value: "eth-1/2/3"
  }
  metadata {
    metadata_id: 3
    value: "\000"
  }
}


=========================================================================
StreamMessageResponse test: error
=========================================================================

--- PD (Input):
error {
  status {
    code: 1
    message: "This is an error."
  }
  packet_out {
    payload: "1"
    metadata {
      egress_port: "eth-1/2/3"
      submit_to_ingress: "0x1"
    }
  }
}

--- IR:
error {
  status {
    code: 1
    message: "This is an error."
  }
  packet_out {
    payload: "1"
    metadata {
      name: "egress_port"
      value {
        str: "eth-1/2/3"
      }
    }
    metadata {
      name: "submit_to_ingress"
      value {
        hex_str: "0x1"
      }
    }
  }
}

--- PI:
error {
  canonical_code: 1
  message: "This is an error."
  packet_out {
    packet_out {
      payload: "1"
      metadata {
        metadata_id: 1
        value: "eth-1/2/3"
      }
      metadata {
        metadata_id: 2
        value: "\001"
      }
      metadata {
        metadata_id: 3
        value: "\000"
      }
    }
  }
}
