#include <memory>

#include "gtest/gtest.h"
#include "gutil/proto.h"
#include "p4_fuzzer/annotation_util.h"
#include "p4_fuzzer/fuzz_util.h"
#include "p4_fuzzer/fuzzer.pb.h"
#include "p4_fuzzer/mutation.h"
#include "p4_pdpi/ir.h"
#include "p4_pdpi/pd.h"

namespace p4_fuzzer {
namespace {

constexpr char kP4InfoFile[] = "p4_fuzzer/sai_main_info.pb.txt";

TEST(FuzzerShowcaseTest, EntryGeneration) {
  absl::BitGen gen;
  p4::config::v1::P4Info p4_info;

  CHECK_EQ(gutil::ReadProtoFromFile(kP4InfoFile, &p4_info), absl::OkStatus());

  auto status_or_p4_info = pdpi::CreateIrP4Info(p4_info);
  if (!status_or_p4_info.ok()) {
    LOG(FATAL) << "Failed to create IrP4Info: "
               << status_or_p4_info.status().message();
  }

  pdpi::IrP4Info ir_p4_info = status_or_p4_info.value();

  std::vector<AnnotatedTableEntry> valid_entries =
      ValidForwardingEntries(&gen, ir_p4_info, 100);

  LOG(INFO) << "Valid table entries generated by fuzzer:";

  for (AnnotatedTableEntry entry : valid_entries) {
    LOG(INFO) << entry.DebugString();
  }

  LOG(INFO)
      << "(Probabilistically) mutated write requests generated by fuzzer:";

  SwitchState state(ir_p4_info);

  for (int i = 0; i < 10; i++) {
    AnnotatedWriteRequest request = FuzzWriteRequest(&gen, ir_p4_info, state);
    LOG(INFO) << request.DebugString();
  }
}

}  // namespace
}  // namespace p4_fuzzer
