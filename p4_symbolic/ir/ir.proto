// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines the overall structure of a P4 program in our IR, as well
// as the supported statements and expressions.
// The structure is tailored to be easy to consume rather than produce.
// It deviates from the underlying bmv2 JSON format, which is mimiced closely
// by p4_symbolic/bmv2/bmv2.proto.
// The bmv2 proto is used to initially parse the JSON format, which is then
// processed by our tool and transformed into the IR.
// The IR does not cover all the features of P4 programs.
// Specifically, we intentionally ignore parsers, de-parsers, stacks and unions,
// checksum calculations, and extern definitions.
// Additionally, some types of expressions and statements are unsupported, these
// are described in the relevant sections of this file.
// See the bmv2 JSON format reference for more information:
// https://github.com/p4lang/behavioral-model/blob/master/docs/JSON_format.md

syntax = "proto3";

package p4_symbolic.ir;

import "p4_pdpi/ir.proto";
import "p4_symbolic/bmv2/bmv2.proto";

// Overall structure of a p4 program.
message P4Program {
  // Header definitions, keyed by a header instance name, which is mapped
  // to its HeaderType.
  // e.g. "standard_metadata" => <standard_metadata_t type definition>.
  map<string, HeaderType> headers = 1;
  // Action definitions and implementations, keyed by qualified action name.
  map<string, Action> actions = 2;
  // Table definitions and implementations, keyed by qualified table name.
  map<string, Table> tables = 3;
  // Conditionals, keyed by their name.
  map<string, Conditional> conditionals = 4;

  // TODO: If needed in the future, action calls can be added here, for
  // action calls that are not wrapped in other control constructs.
  // https://github.com/p4lang/behavioral-model/blob/master/docs/JSON_format.md#pipelines

  // The name of the initial control construct, typically
  // this is a table, but it might be a conditional (or an action call if
  // action_calls mentioned above get supported).
  string initial_control = 6;
}

// A header type definition.
message HeaderType {
  string name = 1;
  int32 id = 2;
  // Maps a field name to its definition.
  map<string, HeaderField> fields = 3;
}

// A P4 header type definition.
message HeaderField {
  string name = 1;
  int32 bitwidth = 2;
  bool signed = 3;
}

// Overall action structure, combining definition with implementation.
message Action {
  pdpi.IrActionDefinition action_definition = 1;
  ActionImplementation action_implementation = 2;
}

// Action implementation details.
message ActionImplementation {
  // Type of all action parameters.
  // Maps a parameter name to its bitwidth.
  map<string, int32> parameter_to_bitwidth = 2;
  // List of statements in action body in sequence.
  repeated Statement action_body = 3;
}

// Overall table structure, combining definition with implementation.
message Table {
  // This contains the name, id, action list, field matches, and max size.
  pdpi.IrTableDefinition table_definition = 1;
  // This contains table implementation details.
  TableImplementation table_implementation = 2;
}

// Table implementation details that are not exposed in the definition.
message TableImplementation {
  enum ActionSelectorType {
    SIMPLE = 0;       // A Simple key and action table.
    INDIRECT = 1;     // Action profiles table.
    INDIRECT_WS = 2;  // Action profiles with dynamic selector.
  }

  // Table type with respect to action selection.
  ActionSelectorType action_selector_type = 1;

  // Default action name. This action is called with the default parameters
  // below, when none of this table's entries are matched on.
  string default_action = 2;

  // Hexstring values passed to default action as parameters.
  repeated string default_action_parameters = 3;

  // Maps every action used by this table (by name) to the next control
  // construct to be taken (also by name) if that action was matched.
  // if an action is not in this map, or is mapped to the empty string, then
  // that action is at the end of the flow.
  map<string, string> action_to_next_control = 4;

  // Maps the name of a match (identical to the name used in p4 info), to
  // that match's target field.
  map<string, FieldValue> match_name_to_field = 5;
}

// A conditional statement.
// In p4 and BMV2 JSON format, a condition is not part of an action body.
// It is a part of the top level control block. A conditional may be the first
// entry point in a workflow, or it may be called from other places using its
// name.
// Note that bmv2 accepts using a conditional name in fields that typically
// expect a table name, such as the initial_control, or next_controls
// attributes.
message Conditional {
  // The name is unique among conditionals AND tables.
  string name = 1;
  RValue condition = 2;
  // If a branch does not exist or is empty, this will be the empty string.
  string if_branch = 3;
  string else_branch = 4;
}

// An abstract p4 statement corresponding to a top level operation within
// an action body.
message Statement {
  p4_symbolic.bmv2.SourceLocation source_info = 1;
  // Various statement concrete types.
  oneof statement {
    AssignmentStatement assignment = 2;
    DropStatement drop = 3;
    CloneStatement clone = 4;
    HashStatement hash = 5;
  }
}

// An assignment statement of the form <left> = <right>.
// Note that left can be an rvalue expression.
message AssignmentStatement {
  LValue left = 1;
  RValue right = 2;
}

// A statement marking the packet (by its header or metadata)
// to be dropped.
message DropStatement {
  HeaderValue header = 1;
}

// A statement cloning the packet, corresponds to `clone3`.
message CloneStatement {
  // We do not care about the arguments to clone3:
  // 1. We only support one version of cloning: ingree to egress
  // 2. The session id is not know at parsing time.
  // 3. We do not support clone calls preserving custom fields.
}

// Hashing statement to modify a selected field based on a hash calculation.
// Corresponds to calls to `hash`.
message HashStatement {
  // The field where the hash is stored.
  FieldValue field = 1;
  // We do not care about the remaining arguments (Hash algorithm,
  // range size, base value, and input fields).
  // These should perhaps be added in the future if the hash symbolic modeling
  // becomes more sophisticated.
}

// The structure of an abstract RValue.
message RValue {
  oneof rvalue {
    HeaderValue header_value = 1;
    FieldValue field_value = 2;
    HexstrValue hexstr_value = 3;
    BoolValue bool_value = 4;
    StringValue string_value = 5;
    Variable variable_value = 6;
    RExpression expression_value = 7;
  }
}

// The structure of an abstract LValue.
message LValue {
  oneof lvalue {
    FieldValue field_value = 1;
    Variable variable_value = 2;
  }
}

// A header accessed by name.
// This is used in operations and statements that refer to the whole packet.
// For example, in mark_to_drop(<header>).
message HeaderValue {
  string header_name = 1;
}

// A header field accessed statically.
// Field access that is dynamic (either in the index/offset or in the header
// object) is defined under AccessExpression below.
message FieldValue {
  string header_name = 1;
  string field_name = 2;
}

// Corresponds to a hex bigendiean encoding of a bit-string.
// In the bmv2 JSON format. The hexstring can be prefixed by "-"
// for negative values.
// We remove any such prefix and explicitly set the negative flag.
message HexstrValue {
  string value = 1;
  bool negative = 2;
}

// A boolean literal value.
message BoolValue {
  bool value = 1;
}

// A string literal value.
message StringValue {
  string value = 1;
}

// A variable used within an LValue or RValue.
message Variable {
  string name = 1;
}

// An abstract RExpression.
message RExpression {
  oneof expression {
    BinaryExpression binary_expression = 1;
    UnaryExpression unary_expression = 2;
    TernaryExpression ternary_expression = 3;
    BuiltinExpression builtin_expression = 4;
  }
}

// Arithmetic, relational, and boolean binary operations.
message BinaryExpression {
  // Supported basic binary expressions.
  enum Operation {
    PLUS = 0;
    MINUS = 1;
    TIMES = 3;
    LEFT_SHIT = 4;    // <<
    RIGHT_SHIFT = 5;  // >>
    EQUALS = 6;       // ==
    NOT_EQUALS = 7;
    GREATER = 8;
    GREATER_EQUALS = 9;
    LESS = 10;
    LESS_EQUALS = 11;
    AND = 12;
    OR = 13;
    BIT_AND = 14;  // &
    BIT_OR = 15;
    BIT_XOR = 16;
  }

  Operation operation = 1;
  RValue left = 2;
  RValue right = 3;
}

// Arithmetic and boolean unary operations.
message UnaryExpression {
  // Supported basic unary expressions.
  enum Operation {
    NOT = 0;           // boolean not.
    BIT_NEGATION = 1;  // ~ (bitwise negation).
  }

  Operation operation = 1;
  RValue operand = 2;
}

// Ternary condition on the form <condition> ? <left> : <right>.
message TernaryExpression {
  RValue condition = 1;
  RValue left = 2;
  RValue right = 3;
}

// Calls tp built in functions (e.g. b2d).
message BuiltinExpression {
  // Supported built in functions.
  enum Function {
    BOOL_TO_DATA = 0;
    DATA_TO_BOOL = 1;
  }
  Function function = 1;
  repeated RValue arguments = 2;
}
