// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package p4_symbolic.packet_synthesizer;

import "p4/v1/p4runtime.proto";
import "p4_pdpi/packetlib/packetlib.proto";
import "p4_symbolic/packet_synthesizer/packet_synthesis_criteria.proto";

message TranslationData {
  // Static mapping between string values and ids.
  message StaticMapping {
    string string_value = 1;
    int32 integer_value = 2;
  }

  repeated StaticMapping static_mapping = 1;
  bool dynamic_translation = 2;
}

// Contains the input parameters (P4 program, table entries, etc.) for
// PacketSynthesizer to build the initial SMT formula.
message PacketSynthesisParams {
  p4.v1.ForwardingPipelineConfig pipeline_config = 1;
  repeated p4.v1.Entity pi_entities = 2;
  repeated int32 physical_port = 3;
  map<string, TranslationData> translation_per_type = 4;
}

// Describes a packet synthesized for a given packet synthesis criteria, with an
// expectation whether the packet gets dropped, punted to the controller, and/or
// mirrored.
message SynthesizedPacket {
  reserved 1, 2, 3, 4, 5;
  // Raw packet as returned by p4-symbolic. It may need padding and updating of
  // checksums and other "computed fields" for pratical use.
  bytes packet = 6;
  string ingress_port = 7;
  bool drop_expected = 8;
  bool punt_expected = 9;
  bool mirror_expected = 10;
  // This data must never be consumed, except for debugging.
  DebugInfo debug_info = 11;

  message DebugInfo {
    // Equal to `packetlib::Parse(packet)`, included to ease debugging.
    // Use with caution, as this field could be stale if the protobuf was cached
    // on disk and packelib has been updated 
    packetlib.Packet possibly_stale_parsed_version_of_packet = 1;
  }
}

// The output of PacketSynthesizer::SynthesizePacket.
message PacketSynthesisResult {
  // If empty, it means the input criteria was not satifiable.
  SynthesizedPacket synthesized_packet = 1;
  // Includes various information about the synthesis process itself, useful for
  // debugging and performance measurement.
  Metadata metadata = 2;

  message Metadata {
    // The number of Z3 solver stack frames modified during the call to
    // `PrepareZ3SolverStack`.
    int64 z3_solver_stack_popped_frame_count = 1;
    // The time spent in `PrepareZ3SolverStack`.
    int64 z3_solver_stack_preparation_time_ms = 2;
    // The time spent in Z3's `solver.check`.
    int64 z3_solver_time_ms = 3;
    // The time spent in `SynthesizePacketFromZ3Model`.
    int64 z3_model_eval_time_ms = 4;
    // The end to end time spent in `PacketSynthesizer::SynthesizePacket`.
    int64 synthesize_packet_overall_time_ms = 5;
  }
}

// Input and output of PacketSynthesizer::SynthesizePacket.
message PacketSynthesisCriteriaAndResult {
  PacketSynthesisCriteria criteria = 1;
  PacketSynthesisResult result = 2;
}

// Stores all the packet synthesis results
// synthesized during path coverage (go/p4-symbolic-path-coverage).
message PacketSynthesisResults {
  repeated PacketSynthesisResult results = 1;
}
