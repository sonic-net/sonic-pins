; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun ethernet.dst_addr () (_ BitVec 48))
(assert
 (let (($x61 (= standard_metadata.ingress_port (_ bv1 9))))
 (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x61)))
(assert
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not (and true (= ethernet.dst_addr (_ bv1 48))))) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (or $x54 (or (or false (= ?x52 (_ bv0 9))) (= ?x52 (_ bv1 9))))))))))))))
(assert
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x39 (ite $x31 $x33 false)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not (and true (= ethernet.dst_addr (_ bv1 48))))) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (and (and (not $x54) $x39) (= (- 1) (- 1))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun ethernet.dst_addr () (_ BitVec 48))
(assert
 (let (($x61 (= standard_metadata.ingress_port (_ bv1 9))))
 (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x61)))
(assert
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not (and true (= ethernet.dst_addr (_ bv1 48))))) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (or $x54 (or (or false (= ?x52 (_ bv0 9))) (= ?x52 (_ bv1 9))))))))))))))
(assert
 (let (($x34 (and true (not (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))))
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x40 (ite $x31 false $x34)))
 (let ((?x38 (ite $x34 (_ bv511 9) (ite (and true $x31) (_ bv511 9) standard_metadata.egress_spec))))
 (let ((?x47 (ite (and true (not (and true (= ethernet.dst_addr (_ bv1 48))))) (_ bv511 9) ?x38)))
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (and (and (not $x54) $x40) (= (- 1) (- 1))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun ethernet.dst_addr () (_ BitVec 48))
(assert
 (let (($x61 (= standard_metadata.ingress_port (_ bv1 9))))
 (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x61)))
(assert
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not (and true (= ethernet.dst_addr (_ bv1 48))))) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (or $x54 (or (or false (= ?x52 (_ bv0 9))) (= ?x52 (_ bv1 9))))))))))))))
(assert
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x49 (ite $x44 0 (- 1))))
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not $x43)) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (and (and (not $x54) true) (= ?x49 (- 1))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun ethernet.dst_addr () (_ BitVec 48))
(assert
 (let (($x61 (= standard_metadata.ingress_port (_ bv1 9))))
 (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x61)))
(assert
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not (and true (= ethernet.dst_addr (_ bv1 48))))) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (or $x54 (or (or false (= ?x52 (_ bv0 9))) (= ?x52 (_ bv1 9))))))))))))))
(assert
 (let (($x42 (= ethernet.dst_addr (_ bv1 48))))
 (let (($x43 (and true $x42)))
 (let (($x44 (and true $x43)))
 (let ((?x49 (ite $x44 0 (- 1))))
 (let (($x31 (= standard_metadata.ingress_port (concat (_ bv0 8) (_ bv0 1)))))
 (let (($x33 (and true $x31)))
 (let (($x34 (and true (not $x31))))
 (let ((?x47 (ite (and true (not $x43)) (_ bv511 9) (ite $x34 (_ bv511 9) (ite $x33 (_ bv511 9) standard_metadata.egress_spec)))))
 (let ((?x52 (ite $x44 (_ bv1 9) ?x47)))
 (let (($x54 (= ?x52 (_ bv511 9))))
 (let (($x97 (and (not $x54) true)))
 (and $x97 (= ?x49 0))))))))))))))
(check-sat)

