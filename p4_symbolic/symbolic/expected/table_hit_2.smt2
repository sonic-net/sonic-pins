; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x57 (= ?x44 (- 1))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) true) $x57)))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) true) (= ?x44 0))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let ((?x68 (ite $x57 (- 1) (ite $x47 (ite $x51 0 (- 1)) (- 1)))))
 (let (($x67 (ite $x57 false (ite $x47 $x48 false))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) $x67) (= ?x68 (- 1)))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let ((?x68 (ite $x57 (- 1) (ite $x47 (ite $x51 0 (- 1)) (- 1)))))
 (let (($x67 (ite $x57 false (ite $x47 $x48 false))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) $x67) (= ?x68 0))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x63 (ite $x57 (ite $x61 0 (- 1)) (- 1))))
 (let (($x62 (ite $x57 $x58 false)))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) $x62) (= ?x63 (- 1)))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x63 (ite $x57 (ite $x61 0 (- 1)) (- 1))))
 (let (($x62 (ite $x57 $x58 false)))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) $x62) (= ?x63 0))))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) true) (= (- 1) (- 1)))))))))))))))
(check-sat)

; 
(set-info :status unknown)
(declare-fun standard_metadata.ingress_port () (_ BitVec 9))
(declare-fun standard_metadata.egress_spec () (_ BitVec 9))
(declare-fun h1.f1 () (_ BitVec 8))
(declare-fun h1.f2 () (_ BitVec 8))
(declare-fun h1.f3 () (_ BitVec 8))
(assert
 (let (($x103 (= standard_metadata.ingress_port (_ bv7 9))))
 (let (($x98 (= standard_metadata.ingress_port (_ bv6 9))))
 (let (($x93 (= standard_metadata.ingress_port (_ bv5 9))))
 (let (($x88 (= standard_metadata.ingress_port (_ bv4 9))))
 (let (($x83 (= standard_metadata.ingress_port (_ bv3 9))))
 (let (($x79 (= standard_metadata.ingress_port (_ bv2 9))))
 (let (($x75 (= standard_metadata.ingress_port (_ bv1 9))))
 (let (($x80 (or (or (or false (= standard_metadata.ingress_port (_ bv0 9))) $x75) $x79)))
 (or (or (or (or (or $x80 $x83) $x88) $x93) $x98) $x103))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x86 (or (or (or (or false (= ?x66 (_ bv0 9))) (= ?x66 (_ bv1 9))) (= ?x66 (_ bv2 9))) (= ?x66 (_ bv3 9)))))
 (let (($x106 (or (or (or (or $x86 (= ?x66 (_ bv4 9))) (= ?x66 (_ bv5 9))) (= ?x66 (_ bv6 9))) (= ?x66 (_ bv7 9)))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (or $x42 $x106)))))))))))))))
(assert
 (let (($x40 (and true (and true (= h1.f1 (_ bv255 8))))))
 (let ((?x46 (ite $x40 (_ bv1 9) (ite true (concat (_ bv0 8) (_ bv0 1)) standard_metadata.egress_spec))))
 (let ((?x44 (ite $x40 0 (- 1))))
 (let (($x47 (and (distinct ?x44 (- 1)) true)))
 (let (($x48 (and true $x47)))
 (let (($x51 (and $x48 (and true (= h1.f2 (_ bv255 8))))))
 (let (($x57 (= ?x44 (- 1))))
 (let (($x58 (and true $x57)))
 (let (($x61 (and $x58 (and true (= h1.f3 (_ bv255 8))))))
 (let ((?x66 (ite $x61 (_ bv3 9) (ite $x51 (_ bv2 9) ?x46))))
 (let (($x42 (= ?x66 (_ bv511 9))))
 (and (and (not $x42) true) (= (- 1) (- 1)))))))))))))))
(check-sat)

