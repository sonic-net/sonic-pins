// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Defines the proto messages used by DVaaS Detective (go/dvaas-detective).

syntax = "proto3";

package dvaas;

// Dvaas Detective attempts to explain a set of `PacketTestOutcomes` in a
// human-friendly way by clustering them.
message DetectiveExplanation {
  // The set of `DetectiveCluster`s that partition `PacketTestOutcomes`.
  repeated DetectiveCluster clusters = 1;
}

// A grouping of `PacketTestOutcomes` produced by DVaaS Detective.
message DetectiveCluster {
  // A human-readable defining property that determines group membership. In
  // other words, a `PacketTestOutcome` is in this cluster IF AND ONLY IF it has
  // this property (e.g. "input_packet_is_ipv4 == true && input_ttl == 2").
  string defining_property = 1;

  // Predicted test outcome for this group (true = pass, false = fail).
  bool predicted_outcome = 2;

  // TODO: Replace counts with `PacketTestOutcomes`.
  // Number of passing tests in this group.
  float passing_tests = 3;
  // Number of failing tests in this group.
  float failing_tests = 4;

  // Accuracy of the predicted outcome for this group (i.e. the fraction of
  // test outcomes in this group that match the predicted outcome).
  float accuracy_of_predicted_outcome = 5;

  // Coverage is calculated with respect to all `PacketTestOutcomes` in a
  // `DetectiveExplanation`.
  // The fraction of all `PacketTestOutcomes` with the predicted outcome that
  // are in this `DetectiveCluster`.
  // For a passing prediction:
  //   coverage = passing_tests / all passing tests
  // For a failing prediction:
  //   coverage = failing_tests / all failing tests
  float coverage_for_predicted_outcome = 6;

  // NOTE: Accuracy and coverage are both important, but high values does not
  // necessarily mean the explanation is good. For inuition, it's possible to
  // achieve 100% accuracy/coverage with a restrictive/permissive defining
  // property that provides no insight into acutal features beings tested. The
  // selection of a defining property is key to a good explanation.
}
